//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 33 colors.
  struct color {
    /// Color `AppBlackColor`.
    static let appBlackColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppBlackColor")
    /// Color `AppClearColor`.
    static let appClearColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppClearColor")
    /// Color `AppLightWhiteColor`.
    static let appLightWhiteColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppLightWhiteColor")
    /// Color `AppPrimaryColor`.
    static let appPrimaryColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppPrimaryColor")
    /// Color `AppWhiteColor`.
    static let appWhiteColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppWhiteColor")
    /// Color `feedtag_red`.
    static let feedtag_red = Rswift.ColorResource(bundle: R.hostingBundle, name: "feedtag_red")
    /// Color `feedtag_skyblue`.
    static let feedtag_skyblue = Rswift.ColorResource(bundle: R.hostingBundle, name: "feedtag_skyblue")
    /// Color `hashtag_lightGold`.
    static let hashtag_lightGold = Rswift.ColorResource(bundle: R.hostingBundle, name: "hashtag_lightGold")
    /// Color `hashtag_orange`.
    static let hashtag_orange = Rswift.ColorResource(bundle: R.hostingBundle, name: "hashtag_orange")
    /// Color `locationtag_orchid`.
    static let locationtag_orchid = Rswift.ColorResource(bundle: R.hostingBundle, name: "locationtag_orchid")
    /// Color `locationtag_sapphire`.
    static let locationtag_sapphire = Rswift.ColorResource(bundle: R.hostingBundle, name: "locationtag_sapphire")
    /// Color `mension_kiwiGreen`.
    static let mension_kiwiGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "mension_kiwiGreen")
    /// Color `mension_militaryGreen`.
    static let mension_militaryGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "mension_militaryGreen")
    /// Color `playlisttag_pumpkinOrange`.
    static let playlisttag_pumpkinOrange = Rswift.ColorResource(bundle: R.hostingBundle, name: "playlisttag_pumpkinOrange")
    /// Color `playlisttag_redOrange`.
    static let playlisttag_redOrange = Rswift.ColorResource(bundle: R.hostingBundle, name: "playlisttag_redOrange")
    /// Color `quetag_ greyishBrown`.
    static let quetag_GreyishBrown = Rswift.ColorResource(bundle: R.hostingBundle, name: "quetag_ greyishBrown")
    /// Color `quetag_ ice`.
    static let quetag_Ice = Rswift.ColorResource(bundle: R.hostingBundle, name: "quetag_ ice")
    /// Color `quetag_ lightUrple`.
    static let quetag_LightUrple = Rswift.ColorResource(bundle: R.hostingBundle, name: "quetag_ lightUrple")
    /// Color `quetag_brightLightGreen`.
    static let quetag_brightLightGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "quetag_brightLightGreen")
    /// Color `quetag_darkPastelGreen`.
    static let quetag_darkPastelGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "quetag_darkPastelGreen")
    /// Color `quetag_darkSkyBlue`.
    static let quetag_darkSkyBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "quetag_darkSkyBlue")
    /// Color `quetag_lightLavender`.
    static let quetag_lightLavender = Rswift.ColorResource(bundle: R.hostingBundle, name: "quetag_lightLavender")
    /// Color `quetag_lightishPurple`.
    static let quetag_lightishPurple = Rswift.ColorResource(bundle: R.hostingBundle, name: "quetag_lightishPurple")
    /// Color `quetag_pinkishGreyTwo`.
    static let quetag_pinkishGreyTwo = Rswift.ColorResource(bundle: R.hostingBundle, name: "quetag_pinkishGreyTwo")
    /// Color `quetag_pinkish`.
    static let quetag_pinkish = Rswift.ColorResource(bundle: R.hostingBundle, name: "quetag_pinkish")
    /// Color `storytag_bluePurple`.
    static let storytag_bluePurple = Rswift.ColorResource(bundle: R.hostingBundle, name: "storytag_bluePurple")
    /// Color `storytag_darkRed`.
    static let storytag_darkRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "storytag_darkRed")
    /// Color `storytag_fadedRed`.
    static let storytag_fadedRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "storytag_fadedRed")
    /// Color `storytag_lightPurple`.
    static let storytag_lightPurple = Rswift.ColorResource(bundle: R.hostingBundle, name: "storytag_lightPurple")
    /// Color `storytag_lightRed`.
    static let storytag_lightRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "storytag_lightRed")
    /// Color `storytag_paleOrange`.
    static let storytag_paleOrange = Rswift.ColorResource(bundle: R.hostingBundle, name: "storytag_paleOrange")
    /// Color `storytag_watermelon`.
    static let storytag_watermelon = Rswift.ColorResource(bundle: R.hostingBundle, name: "storytag_watermelon")
    /// Color `youtubetag_lightRed`.
    static let youtubetag_lightRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "youtubetag_lightRed")
    
    /// `UIColor(named: "AppBlackColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appBlackColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appBlackColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "AppClearColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appClearColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appClearColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "AppLightWhiteColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appLightWhiteColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appLightWhiteColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "AppPrimaryColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appPrimaryColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appPrimaryColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "AppWhiteColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appWhiteColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appWhiteColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "feedtag_red", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func feedtag_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.feedtag_red, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "feedtag_skyblue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func feedtag_skyblue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.feedtag_skyblue, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "hashtag_lightGold", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func hashtag_lightGold(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.hashtag_lightGold, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "hashtag_orange", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func hashtag_orange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.hashtag_orange, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "locationtag_orchid", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func locationtag_orchid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.locationtag_orchid, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "locationtag_sapphire", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func locationtag_sapphire(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.locationtag_sapphire, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "mension_kiwiGreen", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mension_kiwiGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mension_kiwiGreen, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "mension_militaryGreen", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mension_militaryGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mension_militaryGreen, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "playlisttag_pumpkinOrange", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func playlisttag_pumpkinOrange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.playlisttag_pumpkinOrange, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "playlisttag_redOrange", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func playlisttag_redOrange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.playlisttag_redOrange, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "quetag_ greyishBrown", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func quetag_GreyishBrown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.quetag_GreyishBrown, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "quetag_ ice", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func quetag_Ice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.quetag_Ice, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "quetag_ lightUrple", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func quetag_LightUrple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.quetag_LightUrple, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "quetag_brightLightGreen", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func quetag_brightLightGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.quetag_brightLightGreen, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "quetag_darkPastelGreen", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func quetag_darkPastelGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.quetag_darkPastelGreen, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "quetag_darkSkyBlue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func quetag_darkSkyBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.quetag_darkSkyBlue, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "quetag_lightLavender", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func quetag_lightLavender(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.quetag_lightLavender, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "quetag_lightishPurple", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func quetag_lightishPurple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.quetag_lightishPurple, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "quetag_pinkish", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func quetag_pinkish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.quetag_pinkish, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "quetag_pinkishGreyTwo", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func quetag_pinkishGreyTwo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.quetag_pinkishGreyTwo, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "storytag_bluePurple", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func storytag_bluePurple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.storytag_bluePurple, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "storytag_darkRed", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func storytag_darkRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.storytag_darkRed, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "storytag_fadedRed", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func storytag_fadedRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.storytag_fadedRed, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "storytag_lightPurple", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func storytag_lightPurple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.storytag_lightPurple, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "storytag_lightRed", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func storytag_lightRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.storytag_lightRed, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "storytag_paleOrange", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func storytag_paleOrange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.storytag_paleOrange, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "storytag_watermelon", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func storytag_watermelon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.storytag_watermelon, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "youtubetag_lightRed", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func youtubetag_lightRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.youtubetag_lightRed, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 9 files.
  struct file {
    /// Resource file `01 Instrumental Theme (Intro).mp3`.
    static let instrumentalThemeIntroMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "01 Instrumental Theme (Intro)", pathExtension: "mp3")
    /// Resource file `02 Instrumental Theme (Orchestral Sunset).mp3`.
    static let instrumentalThemeOrchestralSunsetMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "02 Instrumental Theme (Orchestral Sunset)", pathExtension: "mp3")
    /// Resource file `03 Mysterious Intro.mp3`.
    static let mysteriousIntroMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "03 Mysterious Intro", pathExtension: "mp3")
    /// Resource file `angry.json`.
    static let angryJson = Rswift.FileResource(bundle: R.hostingBundle, name: "angry", pathExtension: "json")
    /// Resource file `laugh.json`.
    static let laughJson = Rswift.FileResource(bundle: R.hostingBundle, name: "laugh", pathExtension: "json")
    /// Resource file `like.json`.
    static let likeJson = Rswift.FileResource(bundle: R.hostingBundle, name: "like", pathExtension: "json")
    /// Resource file `love.json`.
    static let loveJson = Rswift.FileResource(bundle: R.hostingBundle, name: "love", pathExtension: "json")
    /// Resource file `sad.json`.
    static let sadJson = Rswift.FileResource(bundle: R.hostingBundle, name: "sad", pathExtension: "json")
    /// Resource file `wow.json`.
    static let wowJson = Rswift.FileResource(bundle: R.hostingBundle, name: "wow", pathExtension: "json")
    
    /// `bundle.url(forResource: "01 Instrumental Theme (Intro)", withExtension: "mp3")`
    static func instrumentalThemeIntroMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.instrumentalThemeIntroMp3
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "02 Instrumental Theme (Orchestral Sunset)", withExtension: "mp3")`
    static func instrumentalThemeOrchestralSunsetMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.instrumentalThemeOrchestralSunsetMp3
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "03 Mysterious Intro", withExtension: "mp3")`
    static func mysteriousIntroMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mysteriousIntroMp3
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "angry", withExtension: "json")`
    static func angryJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.angryJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "laugh", withExtension: "json")`
    static func laughJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.laughJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "like", withExtension: "json")`
    static func likeJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.likeJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "love", withExtension: "json")`
    static func loveJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loveJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "sad", withExtension: "json")`
    static func sadJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sadJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "wow", withExtension: "json")`
    static func wowJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.wowJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 41 fonts.
  struct font: Rswift.Validatable {
    /// Font `CourierPrime-BoldItalic`.
    static let courierPrimeBoldItalic = Rswift.FontResource(fontName: "CourierPrime-BoldItalic")
    /// Font `CourierPrime-Bold`.
    static let courierPrimeBold = Rswift.FontResource(fontName: "CourierPrime-Bold")
    /// Font `CourierPrime-Italic`.
    static let courierPrimeItalic = Rswift.FontResource(fontName: "CourierPrime-Italic")
    /// Font `CourierPrime`.
    static let courierPrime = Rswift.FontResource(fontName: "CourierPrime")
    /// Font `Duration-Regular`.
    static let durationRegular = Rswift.FontResource(fontName: "Duration-Regular")
    /// Font `DurationBook-Regular`.
    static let durationBookRegular = Rswift.FontResource(fontName: "DurationBook-Regular")
    /// Font `FuturaFuturisLightC`.
    static let futuraFuturisLightC = Rswift.FontResource(fontName: "FuturaFuturisLightC")
    /// Font `GrandHotel-Regular`.
    static let grandHotelRegular = Rswift.FontResource(fontName: "GrandHotel-Regular")
    /// Font `LinoleoScript`.
    static let linoleoScript = Rswift.FontResource(fontName: "LinoleoScript")
    /// Font `SFUIText-BoldItalic`.
    static let sfuiTextBoldItalic = Rswift.FontResource(fontName: "SFUIText-BoldItalic")
    /// Font `SFUIText-Bold`.
    static let sfuiTextBold = Rswift.FontResource(fontName: "SFUIText-Bold")
    /// Font `SFUIText-HeavyItalic`.
    static let sfuiTextHeavyItalic = Rswift.FontResource(fontName: "SFUIText-HeavyItalic")
    /// Font `SFUIText-Heavy`.
    static let sfuiTextHeavy = Rswift.FontResource(fontName: "SFUIText-Heavy")
    /// Font `SFUIText-Italic`.
    static let sfuiTextItalic = Rswift.FontResource(fontName: "SFUIText-Italic")
    /// Font `SFUIText-LightItalic`.
    static let sfuiTextLightItalic = Rswift.FontResource(fontName: "SFUIText-LightItalic")
    /// Font `SFUIText-Light`.
    static let sfuiTextLight = Rswift.FontResource(fontName: "SFUIText-Light")
    /// Font `SFUIText-MediumItalic`.
    static let sfuiTextMediumItalic = Rswift.FontResource(fontName: "SFUIText-MediumItalic")
    /// Font `SFUIText-Medium`.
    static let sfuiTextMedium = Rswift.FontResource(fontName: "SFUIText-Medium")
    /// Font `SFUIText-Regular`.
    static let sfuiTextRegular = Rswift.FontResource(fontName: "SFUIText-Regular")
    /// Font `SFUIText-SemiboldItalic`.
    static let sfuiTextSemiboldItalic = Rswift.FontResource(fontName: "SFUIText-SemiboldItalic")
    /// Font `SFUIText-Semibold`.
    static let sfuiTextSemibold = Rswift.FontResource(fontName: "SFUIText-Semibold")
    /// Font `SFUIText-UltrathinItalic`.
    static let sfuiTextUltrathinItalic = Rswift.FontResource(fontName: "SFUIText-UltrathinItalic")
    /// Font `SFUIText-Ultrathin`.
    static let sfuiTextUltrathin = Rswift.FontResource(fontName: "SFUIText-Ultrathin")
    /// Font `SofiaPro-BlackItalic`.
    static let sofiaProBlackItalic = Rswift.FontResource(fontName: "SofiaPro-BlackItalic")
    /// Font `SofiaPro-Black`.
    static let sofiaProBlack = Rswift.FontResource(fontName: "SofiaPro-Black")
    /// Font `SofiaPro-BoldItalic`.
    static let sofiaProBoldItalic = Rswift.FontResource(fontName: "SofiaPro-BoldItalic")
    /// Font `SofiaPro-Bold`.
    static let sofiaProBold = Rswift.FontResource(fontName: "SofiaPro-Bold")
    /// Font `SofiaPro-ExtraLight`.
    static let sofiaProExtraLight = Rswift.FontResource(fontName: "SofiaPro-ExtraLight")
    /// Font `SofiaPro-Italic`.
    static let sofiaProItalic = Rswift.FontResource(fontName: "SofiaPro-Italic")
    /// Font `SofiaPro-LightItalic`.
    static let sofiaProLightItalic = Rswift.FontResource(fontName: "SofiaPro-LightItalic")
    /// Font `SofiaPro-MediumItalic`.
    static let sofiaProMediumItalic = Rswift.FontResource(fontName: "SofiaPro-MediumItalic")
    /// Font `SofiaPro-Medium`.
    static let sofiaProMedium = Rswift.FontResource(fontName: "SofiaPro-Medium")
    /// Font `SofiaPro-SemiBoldItalic`.
    static let sofiaProSemiBoldItalic = Rswift.FontResource(fontName: "SofiaPro-SemiBoldItalic")
    /// Font `SofiaPro-SemiBold`.
    static let sofiaProSemiBold = Rswift.FontResource(fontName: "SofiaPro-SemiBold")
    /// Font `SofiaPro-UltraLightItalic`.
    static let sofiaProUltraLightItalic = Rswift.FontResource(fontName: "SofiaPro-UltraLightItalic")
    /// Font `SofiaPro-UltraLight`.
    static let sofiaProUltraLight = Rswift.FontResource(fontName: "SofiaPro-UltraLight")
    /// Font `SofiaProExtraLight-Italic`.
    static let sofiaProExtraLightItalic = Rswift.FontResource(fontName: "SofiaProExtraLight-Italic")
    /// Font `SofiaProRegular`.
    static let sofiaProRegular = Rswift.FontResource(fontName: "SofiaProRegular")
    /// Font `icomoon`.
    static let icomoon = Rswift.FontResource(fontName: "icomoon")
    
    /// `UIFont(name: "CourierPrime", size: ...)`
    static func courierPrime(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: courierPrime, size: size)
    }
    
    /// `UIFont(name: "CourierPrime-Bold", size: ...)`
    static func courierPrimeBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: courierPrimeBold, size: size)
    }
    
    /// `UIFont(name: "CourierPrime-BoldItalic", size: ...)`
    static func courierPrimeBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: courierPrimeBoldItalic, size: size)
    }
    
    /// `UIFont(name: "CourierPrime-Italic", size: ...)`
    static func courierPrimeItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: courierPrimeItalic, size: size)
    }
    
    /// `UIFont(name: "Duration-Regular", size: ...)`
    static func durationRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: durationRegular, size: size)
    }
    
    /// `UIFont(name: "DurationBook-Regular", size: ...)`
    static func durationBookRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: durationBookRegular, size: size)
    }
    
    /// `UIFont(name: "FuturaFuturisLightC", size: ...)`
    static func futuraFuturisLightC(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: futuraFuturisLightC, size: size)
    }
    
    /// `UIFont(name: "GrandHotel-Regular", size: ...)`
    static func grandHotelRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: grandHotelRegular, size: size)
    }
    
    /// `UIFont(name: "LinoleoScript", size: ...)`
    static func linoleoScript(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: linoleoScript, size: size)
    }
    
    /// `UIFont(name: "SFUIText-Bold", size: ...)`
    static func sfuiTextBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiTextBold, size: size)
    }
    
    /// `UIFont(name: "SFUIText-BoldItalic", size: ...)`
    static func sfuiTextBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiTextBoldItalic, size: size)
    }
    
    /// `UIFont(name: "SFUIText-Heavy", size: ...)`
    static func sfuiTextHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiTextHeavy, size: size)
    }
    
    /// `UIFont(name: "SFUIText-HeavyItalic", size: ...)`
    static func sfuiTextHeavyItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiTextHeavyItalic, size: size)
    }
    
    /// `UIFont(name: "SFUIText-Italic", size: ...)`
    static func sfuiTextItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiTextItalic, size: size)
    }
    
    /// `UIFont(name: "SFUIText-Light", size: ...)`
    static func sfuiTextLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiTextLight, size: size)
    }
    
    /// `UIFont(name: "SFUIText-LightItalic", size: ...)`
    static func sfuiTextLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiTextLightItalic, size: size)
    }
    
    /// `UIFont(name: "SFUIText-Medium", size: ...)`
    static func sfuiTextMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiTextMedium, size: size)
    }
    
    /// `UIFont(name: "SFUIText-MediumItalic", size: ...)`
    static func sfuiTextMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiTextMediumItalic, size: size)
    }
    
    /// `UIFont(name: "SFUIText-Regular", size: ...)`
    static func sfuiTextRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiTextRegular, size: size)
    }
    
    /// `UIFont(name: "SFUIText-Semibold", size: ...)`
    static func sfuiTextSemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiTextSemibold, size: size)
    }
    
    /// `UIFont(name: "SFUIText-SemiboldItalic", size: ...)`
    static func sfuiTextSemiboldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiTextSemiboldItalic, size: size)
    }
    
    /// `UIFont(name: "SFUIText-Ultrathin", size: ...)`
    static func sfuiTextUltrathin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiTextUltrathin, size: size)
    }
    
    /// `UIFont(name: "SFUIText-UltrathinItalic", size: ...)`
    static func sfuiTextUltrathinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiTextUltrathinItalic, size: size)
    }
    
    /// `UIFont(name: "SofiaPro-Black", size: ...)`
    static func sofiaProBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sofiaProBlack, size: size)
    }
    
    /// `UIFont(name: "SofiaPro-BlackItalic", size: ...)`
    static func sofiaProBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sofiaProBlackItalic, size: size)
    }
    
    /// `UIFont(name: "SofiaPro-Bold", size: ...)`
    static func sofiaProBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sofiaProBold, size: size)
    }
    
    /// `UIFont(name: "SofiaPro-BoldItalic", size: ...)`
    static func sofiaProBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sofiaProBoldItalic, size: size)
    }
    
    /// `UIFont(name: "SofiaPro-ExtraLight", size: ...)`
    static func sofiaProExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sofiaProExtraLight, size: size)
    }
    
    /// `UIFont(name: "SofiaPro-Italic", size: ...)`
    static func sofiaProItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sofiaProItalic, size: size)
    }
    
    /// `UIFont(name: "SofiaPro-LightItalic", size: ...)`
    static func sofiaProLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sofiaProLightItalic, size: size)
    }
    
    /// `UIFont(name: "SofiaPro-Medium", size: ...)`
    static func sofiaProMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sofiaProMedium, size: size)
    }
    
    /// `UIFont(name: "SofiaPro-MediumItalic", size: ...)`
    static func sofiaProMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sofiaProMediumItalic, size: size)
    }
    
    /// `UIFont(name: "SofiaPro-SemiBold", size: ...)`
    static func sofiaProSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sofiaProSemiBold, size: size)
    }
    
    /// `UIFont(name: "SofiaPro-SemiBoldItalic", size: ...)`
    static func sofiaProSemiBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sofiaProSemiBoldItalic, size: size)
    }
    
    /// `UIFont(name: "SofiaPro-UltraLight", size: ...)`
    static func sofiaProUltraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sofiaProUltraLight, size: size)
    }
    
    /// `UIFont(name: "SofiaPro-UltraLightItalic", size: ...)`
    static func sofiaProUltraLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sofiaProUltraLightItalic, size: size)
    }
    
    /// `UIFont(name: "SofiaProExtraLight-Italic", size: ...)`
    static func sofiaProExtraLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sofiaProExtraLightItalic, size: size)
    }
    
    /// `UIFont(name: "SofiaProRegular", size: ...)`
    static func sofiaProRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sofiaProRegular, size: size)
    }
    
    /// `UIFont(name: "icomoon", size: ...)`
    static func icomoon(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: icomoon, size: size)
    }
    
    static func validate() throws {
      if R.font.courierPrime(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'CourierPrime' could not be loaded, is 'Courier Prime.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.courierPrimeBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'CourierPrime-Bold' could not be loaded, is 'Courier Prime Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.courierPrimeBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'CourierPrime-BoldItalic' could not be loaded, is 'Courier Prime Bold Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.courierPrimeItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'CourierPrime-Italic' could not be loaded, is 'Courier Prime Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.durationRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Duration-Regular' could not be loaded, is 'Duration.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.durationBookRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'DurationBook-Regular' could not be loaded, is 'Duration Book.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.futuraFuturisLightC(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FuturaFuturisLightC' could not be loaded, is 'FuturaFuturisLightC.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.grandHotelRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GrandHotel-Regular' could not be loaded, is 'GrandHotel-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.linoleoScript(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'LinoleoScript' could not be loaded, is 'Linoleo Script.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiTextBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-Bold' could not be loaded, is 'SF-UI-Text-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiTextBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-BoldItalic' could not be loaded, is 'SF-UI-Text-BoldItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiTextHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-Heavy' could not be loaded, is 'SF-UI-Text-Heavy.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiTextHeavyItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-HeavyItalic' could not be loaded, is 'SF-UI-Text-HeavyItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiTextItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-Italic' could not be loaded, is 'SF-UI-Text-RegularItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiTextLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-Light' could not be loaded, is 'SF-UI-Text-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiTextLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-LightItalic' could not be loaded, is 'SF-UI-Text-LightItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiTextMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-Medium' could not be loaded, is 'SF-UI-Text-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiTextMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-MediumItalic' could not be loaded, is 'SF-UI-Text-MediumItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiTextRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-Regular' could not be loaded, is 'SF-UI-Text-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiTextSemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-Semibold' could not be loaded, is 'SF-UI-Text-Semibold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiTextSemiboldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-SemiboldItalic' could not be loaded, is 'SF-UI-Text-SemiboldItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiTextUltrathin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-Ultrathin' could not be loaded, is 'SF-UI-Text-Ultrathin.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiTextUltrathinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-UltrathinItalic' could not be loaded, is 'SF-UI-Text-UltrathinItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sofiaProBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SofiaPro-Black' could not be loaded, is 'Sofia Pro Black.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sofiaProBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SofiaPro-BlackItalic' could not be loaded, is 'Sofia Pro Black Italic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sofiaProBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SofiaPro-Bold' could not be loaded, is 'Sofia Pro Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sofiaProBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SofiaPro-BoldItalic' could not be loaded, is 'Sofia Pro Bold Italic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sofiaProExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SofiaPro-ExtraLight' could not be loaded, is 'Sofia Pro Extra Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sofiaProItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SofiaPro-Italic' could not be loaded, is 'Sofia Pro Italic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sofiaProLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SofiaPro-LightItalic' could not be loaded, is 'Sofia Pro Light Italic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sofiaProMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SofiaPro-Medium' could not be loaded, is 'Sofia Pro Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sofiaProMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SofiaPro-MediumItalic' could not be loaded, is 'Sofia Pro Medium Italic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sofiaProSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SofiaPro-SemiBold' could not be loaded, is 'Sofia Pro Semi Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sofiaProSemiBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SofiaPro-SemiBoldItalic' could not be loaded, is 'Sofia Pro Semi Bold Italic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sofiaProUltraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SofiaPro-UltraLight' could not be loaded, is 'Sofia Pro Ultra Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sofiaProUltraLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SofiaPro-UltraLightItalic' could not be loaded, is 'Sofia Pro Ultra Light Italic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sofiaProExtraLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SofiaProExtraLight-Italic' could not be loaded, is 'Sofia Pro Extra Light Italic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sofiaProRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SofiaProRegular' could not be loaded, is 'Sofia Pro Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.icomoon(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'icomoon' could not be loaded, is 'icomoon.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 35 images.
  struct image {
    /// Image `cameraFlipBack`.
    static let cameraFlipBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "cameraFlipBack")
    /// Image `cameraFlip`.
    static let cameraFlip = Rswift.ImageResource(bundle: R.hostingBundle, name: "cameraFlip")
    /// Image `cameraModeSelect`.
    static let cameraModeSelect = Rswift.ImageResource(bundle: R.hostingBundle, name: "cameraModeSelect")
    /// Image `dimond`.
    static let dimond = Rswift.ImageResource(bundle: R.hostingBundle, name: "dimond")
    /// Image `flashAuto`.
    static let flashAuto = Rswift.ImageResource(bundle: R.hostingBundle, name: "flashAuto")
    /// Image `flashOff`.
    static let flashOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "flashOff")
    /// Image `flashOn`.
    static let flashOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "flashOn")
    /// Image `handsfreeSelected`.
    static let handsfreeSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "handsfreeSelected")
    /// Image `handsfree`.
    static let handsfree = Rswift.ImageResource(bundle: R.hostingBundle, name: "handsfree")
    /// Image `hideStoryCamIcons`.
    static let hideStoryCamIcons = Rswift.ImageResource(bundle: R.hostingBundle, name: "hideStoryCamIcons")
    /// Image `icoBoomrang`.
    static let icoBoomrang = Rswift.ImageResource(bundle: R.hostingBundle, name: "icoBoomrang")
    /// Image `icoCamara`.
    static let icoCamara = Rswift.ImageResource(bundle: R.hostingBundle, name: "icoCamara")
    /// Image `icoCollageMode`.
    static let icoCollageMode = Rswift.ImageResource(bundle: R.hostingBundle, name: "icoCollageMode")
    /// Image `icoCountdownPhoto`.
    static let icoCountdownPhoto = Rswift.ImageResource(bundle: R.hostingBundle, name: "icoCountdownPhoto")
    /// Image `icoCountdown`.
    static let icoCountdown = Rswift.ImageResource(bundle: R.hostingBundle, name: "icoCountdown")
    /// Image `icoCustomMode`.
    static let icoCustomMode = Rswift.ImageResource(bundle: R.hostingBundle, name: "icoCustomMode")
    /// Image `icoDone`.
    static let icoDone = Rswift.ImageResource(bundle: R.hostingBundle, name: "icoDone")
    /// Image `icoHandsFree`.
    static let icoHandsFree = Rswift.ImageResource(bundle: R.hostingBundle, name: "icoHandsFree")
    /// Image `icoPauseCountdown`.
    static let icoPauseCountdown = Rswift.ImageResource(bundle: R.hostingBundle, name: "icoPauseCountdown")
    /// Image `icoSegmentLength`.
    static let icoSegmentLength = Rswift.ImageResource(bundle: R.hostingBundle, name: "icoSegmentLength")
    /// Image `icoSildeshowMode`.
    static let icoSildeshowMode = Rswift.ImageResource(bundle: R.hostingBundle, name: "icoSildeshowMode")
    /// Image `icon_fps`.
    static let icon_fps = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_fps")
    /// Image `openFilter`.
    static let openFilter = Rswift.ImageResource(bundle: R.hostingBundle, name: "openFilter")
    /// Image `outtakes`.
    static let outtakes = Rswift.ImageResource(bundle: R.hostingBundle, name: "outtakes")
    /// Image `showStoryCamIcons`.
    static let showStoryCamIcons = Rswift.ImageResource(bundle: R.hostingBundle, name: "showStoryCamIcons")
    /// Image `storyBack`.
    static let storyBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "storyBack")
    /// Image `storyDelete`.
    static let storyDelete = Rswift.ImageResource(bundle: R.hostingBundle, name: "storyDelete")
    /// Image `storyMute`.
    static let storyMute = Rswift.ImageResource(bundle: R.hostingBundle, name: "storyMute")
    /// Image `storySettings`.
    static let storySettings = Rswift.ImageResource(bundle: R.hostingBundle, name: "storySettings")
    /// Image `storyTimerWithTick`.
    static let storyTimerWithTick = Rswift.ImageResource(bundle: R.hostingBundle, name: "storyTimerWithTick")
    /// Image `storyTimer`.
    static let storyTimer = Rswift.ImageResource(bundle: R.hostingBundle, name: "storyTimer")
    /// Image `unmute`.
    static let unmute = Rswift.ImageResource(bundle: R.hostingBundle, name: "unmute")
    /// Image `uploadStory`.
    static let uploadStory = Rswift.ImageResource(bundle: R.hostingBundle, name: "uploadStory")
    /// Image `userProfilePlaceholder`.
    static let userProfilePlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "userProfilePlaceholder")
    /// Image `video_icon`.
    static let video_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "video_icon")
    
    /// `UIImage(named: "cameraFlip", bundle: ..., traitCollection: ...)`
    static func cameraFlip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cameraFlip, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cameraFlipBack", bundle: ..., traitCollection: ...)`
    static func cameraFlipBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cameraFlipBack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cameraModeSelect", bundle: ..., traitCollection: ...)`
    static func cameraModeSelect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cameraModeSelect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dimond", bundle: ..., traitCollection: ...)`
    static func dimond(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dimond, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "flashAuto", bundle: ..., traitCollection: ...)`
    static func flashAuto(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flashAuto, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "flashOff", bundle: ..., traitCollection: ...)`
    static func flashOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flashOff, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "flashOn", bundle: ..., traitCollection: ...)`
    static func flashOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flashOn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "handsfree", bundle: ..., traitCollection: ...)`
    static func handsfree(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.handsfree, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "handsfreeSelected", bundle: ..., traitCollection: ...)`
    static func handsfreeSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.handsfreeSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "hideStoryCamIcons", bundle: ..., traitCollection: ...)`
    static func hideStoryCamIcons(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hideStoryCamIcons, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icoBoomrang", bundle: ..., traitCollection: ...)`
    static func icoBoomrang(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icoBoomrang, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icoCamara", bundle: ..., traitCollection: ...)`
    static func icoCamara(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icoCamara, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icoCollageMode", bundle: ..., traitCollection: ...)`
    static func icoCollageMode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icoCollageMode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icoCountdown", bundle: ..., traitCollection: ...)`
    static func icoCountdown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icoCountdown, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icoCountdownPhoto", bundle: ..., traitCollection: ...)`
    static func icoCountdownPhoto(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icoCountdownPhoto, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icoCustomMode", bundle: ..., traitCollection: ...)`
    static func icoCustomMode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icoCustomMode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icoDone", bundle: ..., traitCollection: ...)`
    static func icoDone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icoDone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icoHandsFree", bundle: ..., traitCollection: ...)`
    static func icoHandsFree(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icoHandsFree, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icoPauseCountdown", bundle: ..., traitCollection: ...)`
    static func icoPauseCountdown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icoPauseCountdown, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icoSegmentLength", bundle: ..., traitCollection: ...)`
    static func icoSegmentLength(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icoSegmentLength, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icoSildeshowMode", bundle: ..., traitCollection: ...)`
    static func icoSildeshowMode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icoSildeshowMode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_fps", bundle: ..., traitCollection: ...)`
    static func icon_fps(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_fps, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "openFilter", bundle: ..., traitCollection: ...)`
    static func openFilter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.openFilter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "outtakes", bundle: ..., traitCollection: ...)`
    static func outtakes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.outtakes, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "showStoryCamIcons", bundle: ..., traitCollection: ...)`
    static func showStoryCamIcons(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.showStoryCamIcons, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "storyBack", bundle: ..., traitCollection: ...)`
    static func storyBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.storyBack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "storyDelete", bundle: ..., traitCollection: ...)`
    static func storyDelete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.storyDelete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "storyMute", bundle: ..., traitCollection: ...)`
    static func storyMute(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.storyMute, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "storySettings", bundle: ..., traitCollection: ...)`
    static func storySettings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.storySettings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "storyTimer", bundle: ..., traitCollection: ...)`
    static func storyTimer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.storyTimer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "storyTimerWithTick", bundle: ..., traitCollection: ...)`
    static func storyTimerWithTick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.storyTimerWithTick, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "unmute", bundle: ..., traitCollection: ...)`
    static func unmute(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unmute, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "uploadStory", bundle: ..., traitCollection: ...)`
    static func uploadStory(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uploadStory, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "userProfilePlaceholder", bundle: ..., traitCollection: ...)`
    static func userProfilePlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userProfilePlaceholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "video_icon", bundle: ..., traitCollection: ...)`
    static func video_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_icon, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 6 nibs.
  struct nib {
    /// Nib `AllPhotosCollectionViewCell`.
    static let allPhotosCollectionViewCell = _R.nib._AllPhotosCollectionViewCell()
    /// Nib `CameraView`.
    static let cameraView = _R.nib._CameraView()
    /// Nib `CoverA`.
    static let coverA = _R.nib._CoverA()
    /// Nib `ImageCollectionViewCell`.
    static let imageCollectionViewCell = _R.nib._ImageCollectionViewCell()
    /// Nib `LoadingView`.
    static let loadingView = _R.nib._LoadingView()
    /// Nib `PhotosPickerViewController`.
    static let photosPickerViewController = _R.nib._PhotosPickerViewController()
    
    /// `UINib(name: "AllPhotosCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.allPhotosCollectionViewCell) instead")
    static func allPhotosCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.allPhotosCollectionViewCell)
    }
    
    /// `UINib(name: "CameraView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cameraView) instead")
    static func cameraView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cameraView)
    }
    
    /// `UINib(name: "CoverA", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.coverA) instead")
    static func coverA(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.coverA)
    }
    
    /// `UINib(name: "ImageCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imageCollectionViewCell) instead")
    static func imageCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imageCollectionViewCell)
    }
    
    /// `UINib(name: "LoadingView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loadingView) instead")
    static func loadingView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loadingView)
    }
    
    /// `UINib(name: "PhotosPickerViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.photosPickerViewController) instead")
    static func photosPickerViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.photosPickerViewController)
    }
    
    static func allPhotosCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AllPhotosCollectionViewCell? {
      return R.nib.allPhotosCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AllPhotosCollectionViewCell
    }
    
    static func cameraView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CameraView? {
      return R.nib.cameraView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CameraView
    }
    
    static func coverA(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CoverA? {
      return R.nib.coverA.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CoverA
    }
    
    static func imageCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ImageCollectionViewCell? {
      return R.nib.imageCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImageCollectionViewCell
    }
    
    static func loadingView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LoadingView? {
      return R.nib.loadingView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoadingView
    }
    
    static func photosPickerViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.photosPickerViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AllPhotosCollectionViewCell`.
    static let allPhotosCollectionViewCell: Rswift.ReuseIdentifier<AllPhotosCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "AllPhotosCollectionViewCell")
    /// Reuse identifier `ImageCollectionViewCell`.
    static let imageCollectionViewCell: Rswift.ReuseIdentifier<ImageCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "ImageCollectionViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `StoryCameraViewController`.
    static let storyCameraViewController = _R.storyboard.storyCameraViewController()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "StoryCameraViewController", bundle: ...)`
    static func storyCameraViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.storyCameraViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 4 localization tables.
  struct string {
    /// This `R.string.facebookReactionLocalizable` struct is generated, and contains static references to 14 localization keys.
    struct facebookReactionLocalizable {
      /// Base translation: AMEN
      /// 
      /// Locales: en-GB, Base
      static let amen = Rswift.StringResource(key: "amen", tableName: "FacebookReactionLocalizable", bundle: R.hostingBundle, locales: ["en-GB", "Base"], comment: nil)
      /// Base translation: ANGRY
      /// 
      /// Locales: en-GB, Base, fr
      static let angry = Rswift.StringResource(key: "angry", tableName: "FacebookReactionLocalizable", bundle: R.hostingBundle, locales: ["en-GB", "Base", "fr"], comment: nil)
      /// Base translation: HAHA
      /// 
      /// Locales: en-GB, Base, fr
      static let haha = Rswift.StringResource(key: "haha", tableName: "FacebookReactionLocalizable", bundle: R.hostingBundle, locales: ["en-GB", "Base", "fr"], comment: nil)
      /// Base translation: HALLELUJAH
      /// 
      /// Locales: en-GB, Base
      static let hallelujah = Rswift.StringResource(key: "hallelujah", tableName: "FacebookReactionLocalizable", bundle: R.hostingBundle, locales: ["en-GB", "Base"], comment: nil)
      /// Base translation: LIKE
      /// 
      /// Locales: en-GB, Base, fr
      static let like = Rswift.StringResource(key: "like", tableName: "FacebookReactionLocalizable", bundle: R.hostingBundle, locales: ["en-GB", "Base", "fr"], comment: nil)
      /// Base translation: LOL
      /// 
      /// Locales: en-GB, Base
      static let laugh = Rswift.StringResource(key: "laugh", tableName: "FacebookReactionLocalizable", bundle: R.hostingBundle, locales: ["en-GB", "Base"], comment: nil)
      /// Base translation: LOL
      /// 
      /// Locales: en-GB, Base
      static let lol = Rswift.StringResource(key: "lol", tableName: "FacebookReactionLocalizable", bundle: R.hostingBundle, locales: ["en-GB", "Base"], comment: nil)
      /// Base translation: LOVE IT
      /// 
      /// Locales: en-GB, Base, fr
      static let love = Rswift.StringResource(key: "love", tableName: "FacebookReactionLocalizable", bundle: R.hostingBundle, locales: ["en-GB", "Base", "fr"], comment: nil)
      /// Base translation: PEACE
      /// 
      /// Locales: en-GB, Base
      static let peace = Rswift.StringResource(key: "peace", tableName: "FacebookReactionLocalizable", bundle: R.hostingBundle, locales: ["en-GB", "Base"], comment: nil)
      /// Base translation: PRAYER
      /// 
      /// Locales: en-GB, Base
      static let prayer = Rswift.StringResource(key: "prayer", tableName: "FacebookReactionLocalizable", bundle: R.hostingBundle, locales: ["en-GB", "Base"], comment: nil)
      /// Base translation: SAD
      /// 
      /// Locales: en-GB, Base, fr
      static let sad = Rswift.StringResource(key: "sad", tableName: "FacebookReactionLocalizable", bundle: R.hostingBundle, locales: ["en-GB", "Base", "fr"], comment: nil)
      /// Base translation: THANKS
      /// 
      /// Locales: en-GB, Base
      static let thanks = Rswift.StringResource(key: "thanks", tableName: "FacebookReactionLocalizable", bundle: R.hostingBundle, locales: ["en-GB", "Base"], comment: nil)
      /// Base translation: WOW
      /// 
      /// Locales: en-GB, Base, fr
      static let wow = Rswift.StringResource(key: "wow", tableName: "FacebookReactionLocalizable", bundle: R.hostingBundle, locales: ["en-GB", "Base", "fr"], comment: nil)
      /// Base translation: WTF
      /// 
      /// Locales: en-GB, Base
      static let wtf = Rswift.StringResource(key: "wtf", tableName: "FacebookReactionLocalizable", bundle: R.hostingBundle, locales: ["en-GB", "Base"], comment: nil)
      
      /// Base translation: AMEN
      /// 
      /// Locales: en-GB, Base
      static func amen(_: Void = ()) -> String {
        return NSLocalizedString("amen", tableName: "FacebookReactionLocalizable", bundle: R.hostingBundle, value: "AMEN", comment: "")
      }
      
      /// Base translation: ANGRY
      /// 
      /// Locales: en-GB, Base, fr
      static func angry(_: Void = ()) -> String {
        return NSLocalizedString("angry", tableName: "FacebookReactionLocalizable", bundle: R.hostingBundle, value: "ANGRY", comment: "")
      }
      
      /// Base translation: HAHA
      /// 
      /// Locales: en-GB, Base, fr
      static func haha(_: Void = ()) -> String {
        return NSLocalizedString("haha", tableName: "FacebookReactionLocalizable", bundle: R.hostingBundle, value: "HAHA", comment: "")
      }
      
      /// Base translation: HALLELUJAH
      /// 
      /// Locales: en-GB, Base
      static func hallelujah(_: Void = ()) -> String {
        return NSLocalizedString("hallelujah", tableName: "FacebookReactionLocalizable", bundle: R.hostingBundle, value: "HALLELUJAH", comment: "")
      }
      
      /// Base translation: LIKE
      /// 
      /// Locales: en-GB, Base, fr
      static func like(_: Void = ()) -> String {
        return NSLocalizedString("like", tableName: "FacebookReactionLocalizable", bundle: R.hostingBundle, value: "LIKE", comment: "")
      }
      
      /// Base translation: LOL
      /// 
      /// Locales: en-GB, Base
      static func laugh(_: Void = ()) -> String {
        return NSLocalizedString("laugh", tableName: "FacebookReactionLocalizable", bundle: R.hostingBundle, value: "LOL", comment: "")
      }
      
      /// Base translation: LOL
      /// 
      /// Locales: en-GB, Base
      static func lol(_: Void = ()) -> String {
        return NSLocalizedString("lol", tableName: "FacebookReactionLocalizable", bundle: R.hostingBundle, value: "LOL", comment: "")
      }
      
      /// Base translation: LOVE IT
      /// 
      /// Locales: en-GB, Base, fr
      static func love(_: Void = ()) -> String {
        return NSLocalizedString("love", tableName: "FacebookReactionLocalizable", bundle: R.hostingBundle, value: "LOVE IT", comment: "")
      }
      
      /// Base translation: PEACE
      /// 
      /// Locales: en-GB, Base
      static func peace(_: Void = ()) -> String {
        return NSLocalizedString("peace", tableName: "FacebookReactionLocalizable", bundle: R.hostingBundle, value: "PEACE", comment: "")
      }
      
      /// Base translation: PRAYER
      /// 
      /// Locales: en-GB, Base
      static func prayer(_: Void = ()) -> String {
        return NSLocalizedString("prayer", tableName: "FacebookReactionLocalizable", bundle: R.hostingBundle, value: "PRAYER", comment: "")
      }
      
      /// Base translation: SAD
      /// 
      /// Locales: en-GB, Base, fr
      static func sad(_: Void = ()) -> String {
        return NSLocalizedString("sad", tableName: "FacebookReactionLocalizable", bundle: R.hostingBundle, value: "SAD", comment: "")
      }
      
      /// Base translation: THANKS
      /// 
      /// Locales: en-GB, Base
      static func thanks(_: Void = ()) -> String {
        return NSLocalizedString("thanks", tableName: "FacebookReactionLocalizable", bundle: R.hostingBundle, value: "THANKS", comment: "")
      }
      
      /// Base translation: WOW
      /// 
      /// Locales: en-GB, Base, fr
      static func wow(_: Void = ()) -> String {
        return NSLocalizedString("wow", tableName: "FacebookReactionLocalizable", bundle: R.hostingBundle, value: "WOW", comment: "")
      }
      
      /// Base translation: WTF
      /// 
      /// Locales: en-GB, Base
      static func wtf(_: Void = ()) -> String {
        return NSLocalizedString("wtf", tableName: "FacebookReactionLocalizable", bundle: R.hostingBundle, value: "WTF", comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.feedbackLocalizable` struct is generated, and contains static references to 3 localization keys.
    struct feedbackLocalizable {
      /// Base translation: Release to cancel
      /// 
      /// Locales: en-GB, Base, fr
      static let feedbackReleaseToCancel = Rswift.StringResource(key: "feedback.releaseToCancel", tableName: "FeedbackLocalizable", bundle: R.hostingBundle, locales: ["en-GB", "Base", "fr"], comment: nil)
      /// Base translation: Slide finger across
      /// 
      /// Locales: en-GB, Base, fr
      static let feedbackSlideFingerAcross = Rswift.StringResource(key: "feedback.slideFingerAcross", tableName: "FeedbackLocalizable", bundle: R.hostingBundle, locales: ["en-GB", "Base", "fr"], comment: nil)
      /// Base translation: Tap to select a reaction
      /// 
      /// Locales: en-GB, Base, fr
      static let feedbackTapToSelectAReaction = Rswift.StringResource(key: "feedback.tapToSelectAReaction", tableName: "FeedbackLocalizable", bundle: R.hostingBundle, locales: ["en-GB", "Base", "fr"], comment: nil)
      
      /// Base translation: Release to cancel
      /// 
      /// Locales: en-GB, Base, fr
      static func feedbackReleaseToCancel(_: Void = ()) -> String {
        return NSLocalizedString("feedback.releaseToCancel", tableName: "FeedbackLocalizable", bundle: R.hostingBundle, value: "Release to cancel", comment: "")
      }
      
      /// Base translation: Slide finger across
      /// 
      /// Locales: en-GB, Base, fr
      static func feedbackSlideFingerAcross(_: Void = ()) -> String {
        return NSLocalizedString("feedback.slideFingerAcross", tableName: "FeedbackLocalizable", bundle: R.hostingBundle, value: "Slide finger across", comment: "")
      }
      
      /// Base translation: Tap to select a reaction
      /// 
      /// Locales: en-GB, Base, fr
      static func feedbackTapToSelectAReaction(_: Void = ()) -> String {
        return NSLocalizedString("feedback.tapToSelectAReaction", tableName: "FeedbackLocalizable", bundle: R.hostingBundle, value: "Tap to select a reaction", comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 103 localization keys.
    struct localizable {
      /// Value: Are You Sure you want to remove all item from Downloads?
      static let areYouSureYouWantToRemoveAllItemFromDownloads = Rswift.StringResource(key: "Are You Sure you want to remove all item from Downloads?", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Are you sure to remove from playlist?
      static let areYouSureToRemoveFromPlaylist = Rswift.StringResource(key: "Are you sure to remove from playlist?", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Are you sure you want to delete permanently?
      static let areYouSureYouWantToDeletePermanently = Rswift.StringResource(key: "Are you sure you want to delete permanently?", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Are you sure you want to delete?
      static let areYouSureYouWantToDelete = Rswift.StringResource(key: "Are you sure you want to delete?", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Are you sure you want to remove this item from cart?
      static let areYouSureYouWantToRemoveThisItemFromCart = Rswift.StringResource(key: "Are you sure you want to remove this item from cart?", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Are you sure you want to remove this tag from set?
      static let areYouSureYouWantToRemoveThisTagFromSet = Rswift.StringResource(key: "Are you sure you want to remove this tag from set?", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Auto Flash
      static let autoFlash = Rswift.StringResource(key: "Auto Flash", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: BOOMERANG
      static let boomeranG = Rswift.StringResource(key: "BOOMERANG", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: CAPTURE
      static let capturE = Rswift.StringResource(key: "CAPTURE", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: COLLAGE
      static let collagE = Rswift.StringResource(key: "COLLAGE", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: CUSTOM
      static let custoM = Rswift.StringResource(key: "CUSTOM", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Camera Permission decline. Camera access required for capturing photos & Video
      static let cameraPermissionDeclineCameraAccessRequiredForCapturingPhotosVideo = Rswift.StringResource(key: "Camera Permission decline. Camera access required for capturing photos & Video", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Category channel already exist.
      static let categoryChannelAlreadyExist = Rswift.StringResource(key: "Category channel already exist.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Channel name already exist.
      static let channelNameAlreadyExist = Rswift.StringResource(key: "Channel name already exist.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Channel name must be of 6-25 characters.
      static let channelNameMustBeOf625Characters = Rswift.StringResource(key: "Channel name must be of 6-25 characters.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Coming Soon!
      static let comingSoon = Rswift.StringResource(key: "Coming Soon!", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Congratulations! Your channel name has been reserved!
      static let congratulationsYourChannelNameHasBeenReserved = Rswift.StringResource(key: "Congratulations! Your channel name has been reserved!", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Congratulations! Your channel names have been reserved
      static let congratulationsYourChannelNamesHaveBeenReserved = Rswift.StringResource(key: "Congratulations! Your channel names have been reserved", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Delete
      static let delete = Rswift.StringResource(key: "Delete", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Direct Message
      static let directMessage = Rswift.StringResource(key: "Direct Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Do you want to change order of stories?
      static let doYouWantToChangeOrderOfStories = Rswift.StringResource(key: "Do you want to change order of stories?", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Edit
      static let edit = Rswift.StringResource(key: "Edit", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Email already exist.
      static let emailAlreadyExist = Rswift.StringResource(key: "Email already exist.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Flash
      static let flash = Rswift.StringResource(key: "Flash", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: HAND-FREE
      static let handfreE = Rswift.StringResource(key: "HAND-FREE", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: LIVE
      static let livE = Rswift.StringResource(key: "LIVE", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Manage
      static let manage = Rswift.StringResource(key: "Manage", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Mic Off
      static let micOff = Rswift.StringResource(key: "Mic Off", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Mic On
      static let micOn = Rswift.StringResource(key: "Mic On", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Minimum one images required for collage maker.
      static let minimumOneImagesRequiredForCollageMaker = Rswift.StringResource(key: "Minimum one images required for collage maker.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Minimum one video required.
      static let minimumOneVideoRequired = Rswift.StringResource(key: "Minimum one video required.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Minimum three images required for slideshow video.
      static let minimumThreeImagesRequiredForSlideshowVideo = Rswift.StringResource(key: "Minimum three images required for slideshow video.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: NORMAL
      static let photovideO = Rswift.StringResource(key: "PHOTO/VIDEO", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Network unavailable
      static let networkUnavailable = Rswift.StringResource(key: "Network unavailable", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No Flash
      static let noFlash = Rswift.StringResource(key: "No Flash", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Not Now
      static let notNow = Rswift.StringResource(key: "Not Now", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: OK
      static let oK = Rswift.StringResource(key: "OK", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Photo Saved
      static let photoSaved = Rswift.StringResource(key: "Photo Saved", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Playlist copy successfully
      static let playlistCopySuccessfully = Rswift.StringResource(key: "Playlist copy successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please add some reaction to group
      static let pleaseAddSomeReactionToGroup = Rswift.StringResource(key: "Please add some reaction to group", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please check your internet connection.
      static let pleaseCheckYourInternetConnection = Rswift.StringResource(key: "Please check your internet connection.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter Link
      static let pleaseEnterLink = Rswift.StringResource(key: "Please enter Link", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter Message
      static let pleaseEnterMessage = Rswift.StringResource(key: "Please enter Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter Note
      static let pleaseEnterNote = Rswift.StringResource(key: "Please enter Note", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter Subject
      static let pleaseEnterSubject = Rswift.StringResource(key: "Please enter Subject", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter business name.
      static let pleaseEnterBusinessName = Rswift.StringResource(key: "Please enter business name.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter category name.
      static let pleaseEnterCategoryName = Rswift.StringResource(key: "Please enter category name.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter channel title.
      static let pleaseEnterChannelTitle = Rswift.StringResource(key: "Please enter channel title.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter email.
      static let pleaseEnterEmail = Rswift.StringResource(key: "Please enter email.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter gallery name.
      static let pleaseEnterGalleryName = Rswift.StringResource(key: "Please enter gallery name.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter hashtag details!
      static let pleaseEnterHashtagDetails = Rswift.StringResource(key: "Please enter hashtag details!", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter other.
      static let pleaseEnterOther = Rswift.StringResource(key: "Please enter other.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter password.
      static let pleaseEnterPassword = Rswift.StringResource(key: "Please enter password.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter phone number.
      static let pleaseEnterPhoneNumber = Rswift.StringResource(key: "Please enter phone number.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter playlist name
      static let pleaseEnterPlaylistName = Rswift.StringResource(key: "Please enter playlist name", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter something to post.
      static let pleaseEnterSomethingToPost = Rswift.StringResource(key: "Please enter something to post.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter subject and message
      static let pleaseEnterSubjectAndMessage = Rswift.StringResource(key: "Please enter subject and message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter the name of your referring channel.  If you do not have one, use the search feature to find a channel to use.
      static let pleaseEnterTheNameOfYourReferringChannelIfYouDoNotHaveOneUseTheSearchFeatureToFindAChannelToUse = Rswift.StringResource(key: "Please enter the name of your referring channel.  If you do not have one, use the search feature to find a channel to use.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter tweet text.
      static let pleaseEnterTweetText = Rswift.StringResource(key: "Please enter tweet text.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter unique channel name.
      static let pleaseEnterUniqueChannelName = Rswift.StringResource(key: "Please enter unique channel name.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter user's title.
      static let pleaseEnterUserSTitle = Rswift.StringResource(key: "Please enter user's title.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter valid email.
      static let pleaseEnterValidEmail = Rswift.StringResource(key: "Please enter valid email.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter valid link
      static let pleaseEnterValidLink = Rswift.StringResource(key: "Please enter valid link", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter valid user name
      static let pleaseEnterValidUserName = Rswift.StringResource(key: "Please enter valid user name", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please fill up all details
      static let pleaseFillUpAllDetails = Rswift.StringResource(key: "Please fill up all details", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please select atleast one friend.
      static let pleaseSelectAtleastOneFriend = Rswift.StringResource(key: "Please select atleast one friend.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please select relation
      static let pleaseSelectRelation = Rswift.StringResource(key: "Please select relation", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Post In Story
      static let postInStory = Rswift.StringResource(key: "Post In Story", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Post Shared
      static let postShared = Rswift.StringResource(key: "Post Shared", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Rear
      static let rear = Rswift.StringResource(key: "Rear", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Referring channel does not exist.
      static let referringChannelDoesNotExist = Rswift.StringResource(key: "Referring channel does not exist.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Report
      static let report = Rswift.StringResource(key: "Report", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: SLIDESHOW
      static let slideshoW = Rswift.StringResource(key: "SLIDESHOW", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Saved successfuly
      static let savedSuccessfuly = Rswift.StringResource(key: "Saved successfuly", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Saving failed
      static let savingFailed = Rswift.StringResource(key: "Saving failed", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Selected video isn't supported
      static let selectedVideoIsnTSupported = Rswift.StringResource(key: "Selected video isn't supported", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Selfie
      static let selfie = Rswift.StringResource(key: "Selfie", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Share
      static let share = Rswift.StringResource(key: "Share", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Share Post Now
      static let sharePostNow = Rswift.StringResource(key: "Share Post Now", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Something went wrong! Please try again later
      static let somethingWentWrongPleaseTryAgainLater = Rswift.StringResource(key: "Something went wrong! Please try again later", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Story has been added to your playlist
      static let storyHasBeenAddedToYourPlaylist = Rswift.StringResource(key: "Story has been added to your playlist", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: TYPE
      static let typE = Rswift.StringResource(key: "TYPE", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: The person you are calling is currently busy with someone else. Please try after some time
      static let thePersonYouAreCallingIsCurrentlyBusyWithSomeoneElsePleaseTryAfterSomeTime = Rswift.StringResource(key: "The person you are calling is currently busy with someone else. Please try after some time", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: There are no channels to delete.Please select the channels first
      static let thereAreNoChannelsToDeletePleaseSelectTheChannelsFirst = Rswift.StringResource(key: "There are no channels to delete.Please select the channels first", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This device doesn't support a camera
      static let thisDeviceDoesnTSupportACamera = Rswift.StringResource(key: "This device doesn't support a camera", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: User has been reported sucessfully.
      static let userHasBeenReportedSucessfully = Rswift.StringResource(key: "User has been reported sucessfully.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: User is not login. Please login to StoriCam and try again later.
      static let userIsNotLoginPleaseLoginToStoriCamAndTryAgainLater = Rswift.StringResource(key: "User is not login. Please login to StoriCam and try again later.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Username and password does not match. Try Again
      static let usernameAndPasswordDoesNotMatchTryAgain = Rswift.StringResource(key: "Username and password does not match. Try Again", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Video Saved
      static let videoSaved = Rswift.StringResource(key: "Video Saved", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Write Post
      static let writePost = Rswift.StringResource(key: "Write Post", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You can not select more than five participants..
      static let youCanNotSelectMoreThanFiveParticipants = Rswift.StringResource(key: "You can not select more than five participants..", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You can select maximum 10 Photos
      static let youCanSelectMaximum10Photos = Rswift.StringResource(key: "You can select maximum 10 Photos", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have already added this story/post in playlist
      static let youHaveAlreadyAddedThisStoryPostInPlaylist = Rswift.StringResource(key: "You have already added this story/post in playlist", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have already selected this set once!
      static let youHaveAlreadySelectedThisSetOnce = Rswift.StringResource(key: "You have already selected this set once!", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have no package purchased for yourself, Please purchase a package for yourself first to start benefactoring.
      static let youHaveNoPackagePurchasedForYourselfPleasePurchaseAPackageForYourselfFirstToStartBenefactoring = Rswift.StringResource(key: "You have no package purchased for yourself, Please purchase a package for yourself first to start benefactoring.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have successfully added the package for your friend!
      static let youHaveSuccessfullyAddedThePackageForYourFriend = Rswift.StringResource(key: "You have successfully added the package for your friend!", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You reached max limit, if you want to add this channel, Please remove any channel from your package combo and try again later.
      static let youReachedMaxLimitIfYouWantToAddThisChannelPleaseRemoveAnyChannelFromYourPackageComboAndTryAgainLater = Rswift.StringResource(key: "You reached max limit, if you want to add this channel, Please remove any channel from your package combo and try again later.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your microphone is mute
      static let yourMicrophoneIsMute = Rswift.StringResource(key: "Your microphone is mute", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: iPhone Storage Full
      static let iPhoneStorageFull = Rswift.StringResource(key: "iPhone Storage Full", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: seconds
      static let seconds = Rswift.StringResource(key: "Seconds", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: you do not have enough storage to take more photoes. Free up space by deleting unneeded apps, videos or music.
      static let youDoNotHaveEnoughStorageToTakeMorePhotoesFreeUpSpaceByDeletingUnneededAppsVideosOrMusic = Rswift.StringResource(key: "you do not have enough storage to take more photoes. Free up space by deleting unneeded apps, videos or music.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: you have subscribed channel successfully
      static let youHaveSubscribedChannelSuccessfully = Rswift.StringResource(key: "you have subscribed channel successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Are You Sure you want to remove all item from Downloads?
      static func areYouSureYouWantToRemoveAllItemFromDownloads(_: Void = ()) -> String {
        return NSLocalizedString("Are You Sure you want to remove all item from Downloads?", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Are you sure to remove from playlist?
      static func areYouSureToRemoveFromPlaylist(_: Void = ()) -> String {
        return NSLocalizedString("Are you sure to remove from playlist?", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Are you sure you want to delete permanently?
      static func areYouSureYouWantToDeletePermanently(_: Void = ()) -> String {
        return NSLocalizedString("Are you sure you want to delete permanently?", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Are you sure you want to delete?
      static func areYouSureYouWantToDelete(_: Void = ()) -> String {
        return NSLocalizedString("Are you sure you want to delete?", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Are you sure you want to remove this item from cart?
      static func areYouSureYouWantToRemoveThisItemFromCart(_: Void = ()) -> String {
        return NSLocalizedString("Are you sure you want to remove this item from cart?", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Are you sure you want to remove this tag from set?
      static func areYouSureYouWantToRemoveThisTagFromSet(_: Void = ()) -> String {
        return NSLocalizedString("Are you sure you want to remove this tag from set?", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Auto Flash
      static func autoFlash(_: Void = ()) -> String {
        return NSLocalizedString("Auto Flash", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: BOOMERANG
      static func boomeranG(_: Void = ()) -> String {
        return NSLocalizedString("BOOMERANG", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: CAPTURE
      static func capturE(_: Void = ()) -> String {
        return NSLocalizedString("CAPTURE", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: COLLAGE
      static func collagE(_: Void = ()) -> String {
        return NSLocalizedString("COLLAGE", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: CUSTOM
      static func custoM(_: Void = ()) -> String {
        return NSLocalizedString("CUSTOM", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Camera Permission decline. Camera access required for capturing photos & Video
      static func cameraPermissionDeclineCameraAccessRequiredForCapturingPhotosVideo(_: Void = ()) -> String {
        return NSLocalizedString("Camera Permission decline. Camera access required for capturing photos & Video", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("Cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Category channel already exist.
      static func categoryChannelAlreadyExist(_: Void = ()) -> String {
        return NSLocalizedString("Category channel already exist.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Channel name already exist.
      static func channelNameAlreadyExist(_: Void = ()) -> String {
        return NSLocalizedString("Channel name already exist.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Channel name must be of 6-25 characters.
      static func channelNameMustBeOf625Characters(_: Void = ()) -> String {
        return NSLocalizedString("Channel name must be of 6-25 characters.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Coming Soon!
      static func comingSoon(_: Void = ()) -> String {
        return NSLocalizedString("Coming Soon!", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Congratulations! Your channel name has been reserved!
      static func congratulationsYourChannelNameHasBeenReserved(_: Void = ()) -> String {
        return NSLocalizedString("Congratulations! Your channel name has been reserved!", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Congratulations! Your channel names have been reserved
      static func congratulationsYourChannelNamesHaveBeenReserved(_: Void = ()) -> String {
        return NSLocalizedString("Congratulations! Your channel names have been reserved", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Delete
      static func delete(_: Void = ()) -> String {
        return NSLocalizedString("Delete", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Direct Message
      static func directMessage(_: Void = ()) -> String {
        return NSLocalizedString("Direct Message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Do you want to change order of stories?
      static func doYouWantToChangeOrderOfStories(_: Void = ()) -> String {
        return NSLocalizedString("Do you want to change order of stories?", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Edit
      static func edit(_: Void = ()) -> String {
        return NSLocalizedString("Edit", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Email already exist.
      static func emailAlreadyExist(_: Void = ()) -> String {
        return NSLocalizedString("Email already exist.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Flash
      static func flash(_: Void = ()) -> String {
        return NSLocalizedString("Flash", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: HAND-FREE
      static func handfreE(_: Void = ()) -> String {
        return NSLocalizedString("HAND-FREE", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: LIVE
      static func livE(_: Void = ()) -> String {
        return NSLocalizedString("LIVE", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Manage
      static func manage(_: Void = ()) -> String {
        return NSLocalizedString("Manage", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Mic Off
      static func micOff(_: Void = ()) -> String {
        return NSLocalizedString("Mic Off", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Mic On
      static func micOn(_: Void = ()) -> String {
        return NSLocalizedString("Mic On", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Minimum one images required for collage maker.
      static func minimumOneImagesRequiredForCollageMaker(_: Void = ()) -> String {
        return NSLocalizedString("Minimum one images required for collage maker.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Minimum one video required.
      static func minimumOneVideoRequired(_: Void = ()) -> String {
        return NSLocalizedString("Minimum one video required.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Minimum three images required for slideshow video.
      static func minimumThreeImagesRequiredForSlideshowVideo(_: Void = ()) -> String {
        return NSLocalizedString("Minimum three images required for slideshow video.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: NORMAL
      static func photovideO(_: Void = ()) -> String {
        return NSLocalizedString("PHOTO/VIDEO", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Network unavailable
      static func networkUnavailable(_: Void = ()) -> String {
        return NSLocalizedString("Network unavailable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: No Flash
      static func noFlash(_: Void = ()) -> String {
        return NSLocalizedString("No Flash", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Not Now
      static func notNow(_: Void = ()) -> String {
        return NSLocalizedString("Not Now", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: OK
      static func oK(_: Void = ()) -> String {
        return NSLocalizedString("OK", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Photo Saved
      static func photoSaved(_: Void = ()) -> String {
        return NSLocalizedString("Photo Saved", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Playlist copy successfully
      static func playlistCopySuccessfully(_: Void = ()) -> String {
        return NSLocalizedString("Playlist copy successfully", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please add some reaction to group
      static func pleaseAddSomeReactionToGroup(_: Void = ()) -> String {
        return NSLocalizedString("Please add some reaction to group", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please check your internet connection.
      static func pleaseCheckYourInternetConnection(_: Void = ()) -> String {
        return NSLocalizedString("Please check your internet connection.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter Link
      static func pleaseEnterLink(_: Void = ()) -> String {
        return NSLocalizedString("Please enter Link", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter Message
      static func pleaseEnterMessage(_: Void = ()) -> String {
        return NSLocalizedString("Please enter Message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter Note
      static func pleaseEnterNote(_: Void = ()) -> String {
        return NSLocalizedString("Please enter Note", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter Subject
      static func pleaseEnterSubject(_: Void = ()) -> String {
        return NSLocalizedString("Please enter Subject", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter business name.
      static func pleaseEnterBusinessName(_: Void = ()) -> String {
        return NSLocalizedString("Please enter business name.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter category name.
      static func pleaseEnterCategoryName(_: Void = ()) -> String {
        return NSLocalizedString("Please enter category name.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter channel title.
      static func pleaseEnterChannelTitle(_: Void = ()) -> String {
        return NSLocalizedString("Please enter channel title.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter email.
      static func pleaseEnterEmail(_: Void = ()) -> String {
        return NSLocalizedString("Please enter email.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter gallery name.
      static func pleaseEnterGalleryName(_: Void = ()) -> String {
        return NSLocalizedString("Please enter gallery name.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter hashtag details!
      static func pleaseEnterHashtagDetails(_: Void = ()) -> String {
        return NSLocalizedString("Please enter hashtag details!", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter other.
      static func pleaseEnterOther(_: Void = ()) -> String {
        return NSLocalizedString("Please enter other.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter password.
      static func pleaseEnterPassword(_: Void = ()) -> String {
        return NSLocalizedString("Please enter password.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter phone number.
      static func pleaseEnterPhoneNumber(_: Void = ()) -> String {
        return NSLocalizedString("Please enter phone number.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter playlist name
      static func pleaseEnterPlaylistName(_: Void = ()) -> String {
        return NSLocalizedString("Please enter playlist name", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter something to post.
      static func pleaseEnterSomethingToPost(_: Void = ()) -> String {
        return NSLocalizedString("Please enter something to post.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter subject and message
      static func pleaseEnterSubjectAndMessage(_: Void = ()) -> String {
        return NSLocalizedString("Please enter subject and message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter the name of your referring channel.  If you do not have one, use the search feature to find a channel to use.
      static func pleaseEnterTheNameOfYourReferringChannelIfYouDoNotHaveOneUseTheSearchFeatureToFindAChannelToUse(_: Void = ()) -> String {
        return NSLocalizedString("Please enter the name of your referring channel.  If you do not have one, use the search feature to find a channel to use.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter tweet text.
      static func pleaseEnterTweetText(_: Void = ()) -> String {
        return NSLocalizedString("Please enter tweet text.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter unique channel name.
      static func pleaseEnterUniqueChannelName(_: Void = ()) -> String {
        return NSLocalizedString("Please enter unique channel name.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter user's title.
      static func pleaseEnterUserSTitle(_: Void = ()) -> String {
        return NSLocalizedString("Please enter user's title.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter valid email.
      static func pleaseEnterValidEmail(_: Void = ()) -> String {
        return NSLocalizedString("Please enter valid email.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter valid link
      static func pleaseEnterValidLink(_: Void = ()) -> String {
        return NSLocalizedString("Please enter valid link", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter valid user name
      static func pleaseEnterValidUserName(_: Void = ()) -> String {
        return NSLocalizedString("Please enter valid user name", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please fill up all details
      static func pleaseFillUpAllDetails(_: Void = ()) -> String {
        return NSLocalizedString("Please fill up all details", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please select atleast one friend.
      static func pleaseSelectAtleastOneFriend(_: Void = ()) -> String {
        return NSLocalizedString("Please select atleast one friend.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please select relation
      static func pleaseSelectRelation(_: Void = ()) -> String {
        return NSLocalizedString("Please select relation", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Post In Story
      static func postInStory(_: Void = ()) -> String {
        return NSLocalizedString("Post In Story", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Post Shared
      static func postShared(_: Void = ()) -> String {
        return NSLocalizedString("Post Shared", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Rear
      static func rear(_: Void = ()) -> String {
        return NSLocalizedString("Rear", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Referring channel does not exist.
      static func referringChannelDoesNotExist(_: Void = ()) -> String {
        return NSLocalizedString("Referring channel does not exist.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Report
      static func report(_: Void = ()) -> String {
        return NSLocalizedString("Report", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: SLIDESHOW
      static func slideshoW(_: Void = ()) -> String {
        return NSLocalizedString("SLIDESHOW", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Saved successfuly
      static func savedSuccessfuly(_: Void = ()) -> String {
        return NSLocalizedString("Saved successfuly", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Saving failed
      static func savingFailed(_: Void = ()) -> String {
        return NSLocalizedString("Saving failed", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Selected video isn't supported
      static func selectedVideoIsnTSupported(_: Void = ()) -> String {
        return NSLocalizedString("Selected video isn't supported", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Selfie
      static func selfie(_: Void = ()) -> String {
        return NSLocalizedString("Selfie", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Share
      static func share(_: Void = ()) -> String {
        return NSLocalizedString("Share", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Share Post Now
      static func sharePostNow(_: Void = ()) -> String {
        return NSLocalizedString("Share Post Now", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Something went wrong! Please try again later
      static func somethingWentWrongPleaseTryAgainLater(_: Void = ()) -> String {
        return NSLocalizedString("Something went wrong! Please try again later", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Story has been added to your playlist
      static func storyHasBeenAddedToYourPlaylist(_: Void = ()) -> String {
        return NSLocalizedString("Story has been added to your playlist", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: TYPE
      static func typE(_: Void = ()) -> String {
        return NSLocalizedString("TYPE", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: The person you are calling is currently busy with someone else. Please try after some time
      static func thePersonYouAreCallingIsCurrentlyBusyWithSomeoneElsePleaseTryAfterSomeTime(_: Void = ()) -> String {
        return NSLocalizedString("The person you are calling is currently busy with someone else. Please try after some time", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: There are no channels to delete.Please select the channels first
      static func thereAreNoChannelsToDeletePleaseSelectTheChannelsFirst(_: Void = ()) -> String {
        return NSLocalizedString("There are no channels to delete.Please select the channels first", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: This device doesn't support a camera
      static func thisDeviceDoesnTSupportACamera(_: Void = ()) -> String {
        return NSLocalizedString("This device doesn't support a camera", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: User has been reported sucessfully.
      static func userHasBeenReportedSucessfully(_: Void = ()) -> String {
        return NSLocalizedString("User has been reported sucessfully.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: User is not login. Please login to StoriCam and try again later.
      static func userIsNotLoginPleaseLoginToStoriCamAndTryAgainLater(_: Void = ()) -> String {
        return NSLocalizedString("User is not login. Please login to StoriCam and try again later.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Username and password does not match. Try Again
      static func usernameAndPasswordDoesNotMatchTryAgain(_: Void = ()) -> String {
        return NSLocalizedString("Username and password does not match. Try Again", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Video Saved
      static func videoSaved(_: Void = ()) -> String {
        return NSLocalizedString("Video Saved", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Write Post
      static func writePost(_: Void = ()) -> String {
        return NSLocalizedString("Write Post", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You can not select more than five participants..
      static func youCanNotSelectMoreThanFiveParticipants(_: Void = ()) -> String {
        return NSLocalizedString("You can not select more than five participants..", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You can select maximum 10 Photos
      static func youCanSelectMaximum10Photos(_: Void = ()) -> String {
        return NSLocalizedString("You can select maximum 10 Photos", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You have already added this story/post in playlist
      static func youHaveAlreadyAddedThisStoryPostInPlaylist(_: Void = ()) -> String {
        return NSLocalizedString("You have already added this story/post in playlist", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You have already selected this set once!
      static func youHaveAlreadySelectedThisSetOnce(_: Void = ()) -> String {
        return NSLocalizedString("You have already selected this set once!", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You have no package purchased for yourself, Please purchase a package for yourself first to start benefactoring.
      static func youHaveNoPackagePurchasedForYourselfPleasePurchaseAPackageForYourselfFirstToStartBenefactoring(_: Void = ()) -> String {
        return NSLocalizedString("You have no package purchased for yourself, Please purchase a package for yourself first to start benefactoring.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You have successfully added the package for your friend!
      static func youHaveSuccessfullyAddedThePackageForYourFriend(_: Void = ()) -> String {
        return NSLocalizedString("You have successfully added the package for your friend!", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You reached max limit, if you want to add this channel, Please remove any channel from your package combo and try again later.
      static func youReachedMaxLimitIfYouWantToAddThisChannelPleaseRemoveAnyChannelFromYourPackageComboAndTryAgainLater(_: Void = ()) -> String {
        return NSLocalizedString("You reached max limit, if you want to add this channel, Please remove any channel from your package combo and try again later.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your microphone is mute
      static func yourMicrophoneIsMute(_: Void = ()) -> String {
        return NSLocalizedString("Your microphone is mute", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: iPhone Storage Full
      static func iPhoneStorageFull(_: Void = ()) -> String {
        return NSLocalizedString("iPhone Storage Full", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: seconds
      static func seconds(_: Void = ()) -> String {
        return NSLocalizedString("Seconds", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: you do not have enough storage to take more photoes. Free up space by deleting unneeded apps, videos or music.
      static func youDoNotHaveEnoughStorageToTakeMorePhotoesFreeUpSpaceByDeletingUnneededAppsVideosOrMusic(_: Void = ()) -> String {
        return NSLocalizedString("you do not have enough storage to take more photoes. Free up space by deleting unneeded apps, videos or music.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: you have subscribed channel successfully
      static func youHaveSubscribedChannelSuccessfully(_: Void = ()) -> String {
        return NSLocalizedString("you have subscribed channel successfully", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.reactionSummaryLocalizable` struct is generated, and contains static references to 2 localization keys.
    struct reactionSummaryLocalizable {
      /// Base translation: %#@value@
      /// 
      /// Locales: en-GB, Base, fr
      static let summaryOther = Rswift.StringResource(key: "summary.other", tableName: "ReactionSummaryLocalizable", bundle: R.hostingBundle, locales: ["en-GB", "Base", "fr"], comment: nil)
      /// Base translation: %#@value@
      /// 
      /// Locales: en-GB, Base, fr
      static let summaryYou = Rswift.StringResource(key: "summary.you", tableName: "ReactionSummaryLocalizable", bundle: R.hostingBundle, locales: ["en-GB", "Base", "fr"], comment: nil)
      
      /// Base translation: %#@value@
      /// 
      /// Locales: en-GB, Base, fr
      static func summaryOther(value value1: Int) -> String {
        return String(format: NSLocalizedString("summary.other", tableName: "ReactionSummaryLocalizable", bundle: R.hostingBundle, value: "%#@value@", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: %#@value@
      /// 
      /// Locales: en-GB, Base, fr
      static func summaryYou(value value1: Int) -> String {
        return String(format: NSLocalizedString("summary.you", tableName: "ReactionSummaryLocalizable", bundle: R.hostingBundle, value: "%#@value@", comment: ""), locale: R.applicationLocale, value1)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CameraView.validate()
      try _CoverA.validate()
      try _LoadingView.validate()
    }
    
    struct _AllPhotosCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AllPhotosCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "AllPhotosCollectionViewCell"
      let name = "AllPhotosCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AllPhotosCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AllPhotosCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _CameraView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CameraView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CameraView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CameraView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "tagCamera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tagCamera' is used in nib 'CameraView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _CoverA: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CoverA"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CoverA? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CoverA
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_play_circle_filled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_play_circle_filled' is used in nib 'CoverA', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ImageCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ImageCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ImageCollectionViewCell"
      let name = "ImageCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ImageCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImageCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _LoadingView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LoadingView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LoadingView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoadingView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ad1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ad1' is used in nib 'LoadingView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _PhotosPickerViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PhotosPickerViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
      try storyCameraViewController.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct storyCameraViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = StoryCameraViewController
      
      let bundle = R.hostingBundle
      let name = "StoryCameraViewController"
      let storyCameraViewController = StoryboardViewControllerResource<StoryCameraViewController>(identifier: "StoryCameraViewController")
      
      func storyCameraViewController(_: Void = ()) -> StoryCameraViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: storyCameraViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "cameraFlip", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cameraFlip' is used in storyboard 'StoryCameraViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dimond", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dimond' is used in storyboard 'StoryCameraViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "flashOff", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'flashOff' is used in storyboard 'StoryCameraViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hideStoryCamIcons", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hideStoryCamIcons' is used in storyboard 'StoryCameraViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icoCountdown", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icoCountdown' is used in storyboard 'StoryCameraViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icoCountdownPhoto", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icoCountdownPhoto' is used in storyboard 'StoryCameraViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icoDone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icoDone' is used in storyboard 'StoryCameraViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icoPauseCountdown", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icoPauseCountdown' is used in storyboard 'StoryCameraViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icoSegmentLength", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icoSegmentLength' is used in storyboard 'StoryCameraViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_fps", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_fps' is used in storyboard 'StoryCameraViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "openFilter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'openFilter' is used in storyboard 'StoryCameraViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "outtakes", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'outtakes' is used in storyboard 'StoryCameraViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "showStoryCamIcons", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'showStoryCamIcons' is used in storyboard 'StoryCameraViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "storyBack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'storyBack' is used in storyboard 'StoryCameraViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "storyClose", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'storyClose' is used in storyboard 'StoryCameraViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "storyDelete", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'storyDelete' is used in storyboard 'StoryCameraViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "storySettings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'storySettings' is used in storyboard 'StoryCameraViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "storyTimerWithTick", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'storyTimerWithTick' is used in storyboard 'StoryCameraViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "thumbZoomSlider", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'thumbZoomSlider' is used in storyboard 'StoryCameraViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unmute", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unmute' is used in storyboard 'StoryCameraViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "zoomSliderMinus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'zoomSliderMinus' is used in storyboard 'StoryCameraViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "zoomSliderPlus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'zoomSliderPlus' is used in storyboard 'StoryCameraViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.storyCameraViewController().storyCameraViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'storyCameraViewController' could not be loaded from storyboard 'StoryCameraViewController' as 'StoryCameraViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
